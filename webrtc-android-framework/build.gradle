apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin:'maven-publish'
apply plugin:'signing'
apply from: '../loadCredentials.gradle'
android {
    compileSdkVersion 32

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
       sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        animationsDisabled true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    namespace 'io.antmedia.webrtcandroidframework'
}


tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest','createDebugCoverageReport']) {
    reports {
         xml.enabled = true
         html.enabled = true
     }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'

    ]))
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'androidx.annotation:annotation:1.5.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    //testImplementation project(path: ':webrtc-android-framework')
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'webrtc-android-framework'

    publishedGroupId = 'io.github.usamawizard'
    libraryName = 'webrtc-android-framework'
    artifact = 'webrtc-android-framework'

    libraryDescription = 'WebRTC Android SDK to build andoid app with ant media server '

    siteUrl = 'https://github.com/USAMAWIZARD/maven-upload.git'
    gitUrl = 'https://github.com/USAMAWIZARD/maven-upload.git'

    libraryVersion = '1.0.0'

    developerId = 'test'
    developerName = 'test'
    developerEmail = 'test@test.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {

                groupId = publishedGroupId
                artifactId = artifact
                version = libraryVersion

                artifact bundleReleaseAar
                pom {
                    name = libraryName
                    description = libraryDescription
                    url = siteUrl
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }

                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                }

        }
    }
    signing {
        useInMemoryPgpKeys(
        rootProject.ext["signing.keyId"],
        rootProject.ext["signing.key"],
        rootProject.ext["signing.password"],
        )
        sign publishing.publications.release
    }
}
}

